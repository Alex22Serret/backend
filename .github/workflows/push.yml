on: push
name: deploy

jobs:
  # Job para enviar notificación de inicio
  notify_start:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Start Slack message
        id: start_message
        run: |
          REPO_NAME=$(basename ${{ github.repository }})
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMIT_SHA_SHORT="${{ github.sha_short }}"
          ACTOR="${{ github.actor }}"

          MESSAGE=":rocket: *Pipeline de ${REPO_NAME} iniciada* :zap:\n"
          MESSAGE+="Triggered by _${ACTOR}_ on commit \`${COMMIT_SHA_SHORT}\`\n"
          MESSAGE+="<${RUN_URL}|Ver ejecución en GitHub Actions>"

          echo "::set-output name=slack_text::${MESSAGE}"
          echo "::set-output name=slack_color::#439FE0" # Azul (información)

      - name: Send Slack start notification
        uses: slackapi/slack-notify-action@v1.2.0
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.start_message.outputs.slack_color }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "${{ steps.start_message.outputs.slack_text }}"
                      }
                    }
                  ]
                }
              ]
            }

  deploy:
    runs-on: ubuntu-latest
    needs: notify_start # Este job esperará a que la notificación de inicio se envíe
    steps:
      - uses: actions/checkout@v4

      - name: Extract repo name
        id: repo
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:${{ github.sha }}

  # Job para notificaciones de Slack (éxito o fallo de la pipeline principal)
  notify_end:
    runs-on: ubuntu-latest
    needs: [deploy] # Este job espera a que el job 'deploy' termine
    if: always() # ¡Importante! Siempre se ejecuta, incluso si el job 'deploy' falla
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare End Slack message
        id: end_message
        run: |
          REPO_NAME=$(basename ${{ github.repository }})
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMIT_SHA_SHORT="${{ github.sha_short }}"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          ACTOR="${{ github.actor }}"

          # Obtener el estado del job de despliegue
          DEPLOY_STATUS="${{ needs.deploy.result }}"

          MESSAGE=""
          COLOR=""

          if [ "${DEPLOY_STATUS}" == "success" ]; then
            MESSAGE=":white_check_mark: *Pipeline de ${REPO_NAME} finalizada con ÉXITO* :tada:\n"
            MESSAGE+="Commit: \`${COMMIT_SHA_SHORT}\` by _${ACTOR}_\n"
            MESSAGE+="Mensaje: _${COMMIT_MESSAGE}_\n"
            COLOR="good" # Verde
          elif [ "${DEPLOY_STATUS}" == "failure" ]; then
            MESSAGE=":x: *Pipeline de ${REPO_NAME} ha FALLADO* :sad_face:\n"
            MESSAGE+="Commit: \`${COMMIT_SHA_SHORT}\` by _${ACTOR}_\n"
            MESSAGE+="Mensaje: _${COMMIT_MESSAGE}_\n"
            COLOR="danger" # Rojo
          else
            # Otros estados como 'cancelled' o 'skipped' (por ejemplo, si el job 'deploy' fue cancelado)
            MESSAGE=":grey_question: *Pipeline de ${REPO_NAME} finalizada con estado: ${{ DEPLOY_STATUS }}* \n"
            MESSAGE+="Commit: \`${COMMIT_SHA_SHORT}\` by _${ACTOR}_\n"
            MESSAGE+="Mensaje: _${COMMIT_MESSAGE}_\n"
            COLOR="#808080" # Gris
          fi

          MESSAGE+="<${RUN_URL}|Ver ejecución en GitHub Actions>"

          echo "::set-output name=slack_text::${MESSAGE}"
          echo "::set-output name=slack_color::${COLOR}"

      - name: Send Slack end notification
        uses: slackapi/slack-notify-action@v1.2.0
        if: success() || failure() # Ejecutar si el paso de preparación del mensaje fue exitoso o fallido
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.end_message.outputs.slack_color }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "${{ steps.end_message.outputs.slack_text }}"
                      }
                    }
                  ]
                }
              ]
            }